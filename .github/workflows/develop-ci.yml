name: Develop CI and Release Prep

on:
  push:
    branches:
      - "develop" # dispara apenas quando há push/merge na branch develop

jobs:
  build-test-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # precisamos de todo histórico para ver releases anteriores

      # 2. Setup .NET 8
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # 3. Restore dependências
      - name: Restore dependencies
        run: dotnet restore ./app/Pathways.Api.csproj

      # 4. Build
      - name: Build
        run: dotnet build ./app/Pathways.Api.csproj --configuration Release --no-restore

      # 5. Testes unitários
      - name: Test
        run: dotnet test ./tests/Pathways.Api.Tests.csproj --configuration Release --verbosity normal

      # 6. Obter última release
      - name: Get latest release branch
        id: get_release
        run: |
          latest=$(git ls-remote --heads origin "refs/heads/release/*" | awk -F'/' '{print $NF}' | sort -V | tail -n1)
          echo "latest_release=$latest" >> $GITHUB_OUTPUT

      # 7. Calcular próxima versão (incremento do patch)
      - name: Calculate next version
        id: calc_version
        run: |
          if [ -z "${{ steps.get_release.outputs.latest_release }}" ]; then
            next="0.0.1"
          else
            last="${{ steps.get_release.outputs.latest_release }}"
            patch=$(echo $last | awk -F. '{print $3}')
            major=$(echo $last | awk -F. '{print $1}')
            minor=$(echo $last | awk -F. '{print $2}')
            next="$major.$minor.$((patch+1))"
          fi
          echo "next_version=$next" >> $GITHUB_OUTPUT

      # 8. Criar ou atualizar a branch release/x.y.z
      - name: Create or update release branch
        run: |
          next="release/${{ steps.calc_version.outputs.next_version }}"
          if git ls-remote --exit-code --heads origin $next; then
            echo "Branch $next já existe, atualizando..."
            git checkout $next
            git merge origin/develop --no-edit || true
          else
            echo "Criando nova release $next"
            git checkout -b $next origin/develop
          fi
          git push origin HEAD:$next

      # 9. Criar/atualizar PR develop → release/x.y.z
      - name: Create PR develop → release
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: develop
          destination_branch: release/${{ steps.calc_version.outputs.next_version }}
          pr_title: "Release ${{ steps.calc_version.outputs.next_version }}"
          pr_body: "PR automático de develop para release/${{ steps.calc_version.outputs.next_version }}"
