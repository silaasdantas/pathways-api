name: Release CD

on:
  push:
    branches:
      - "release/*"

permissions:
  contents: read
  pull-requests: write

jobs:
  build-test-merge:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Setup .NET
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # 3. Restore
      - name: Restore dependencies
        run: dotnet restore ./app/Pathways.Api.csproj

      # 4. Build
      - name: Build
        run: dotnet build ./app/Pathways.Api.csproj --configuration Release --no-restore

      # 5. Test (comando atualizado)
      - name: Run tests
        run: dotnet test ./tests/Pathways.Api.Tests.csproj --configuration Release --verbosity normal

      # 6. Build Docker Image (opcional, só validação)
      - name: Build Docker image
        run: docker build -t pathways-api:test ./app

      # 7. Criar ou atualizar PR release → main
      - name: Create PR release → main
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: ${{ github.ref_name }}
          title: "Release ${{ github.ref_name }} → main"
          body: |
            Este PR foi criado automaticamente após passar nos testes.
            Ele mescla `${{ github.ref_name }}` em `main`.
          labels: release

      # 8. Instalar GitHub CLI
      - name: Setup GitHub CLI
        uses: cli/cli-action@v2
        with:
          version: latest

      # 9. Forçar auto-merge do PR
      - name: Auto-merge PR
        run: |
          pr_number=$(gh pr list --head "${{ github.ref_name }}" --base main --json number --jq '.[0].number')
          if [ -n "$pr_number" ]; then
            echo "Auto-merging PR #$pr_number"
            merge_state=$(gh pr view "$pr_number" --json mergeStateStatus --jq '.mergeStateStatus')
            if [ "$merge_state" = "CLEAN" ] || [ "$merge_state" = "HAS_HOOKS" ] || [ "$merge_state" = "UNSTABLE" ]; then
              if ! gh pr merge "$pr_number" --merge --auto; then
                echo "Auto-merge não disponível para o PR #$pr_number. Prosseguindo sem falhar."
              fi
            else
              echo "PR #$pr_number não está pronto para auto-merge (estado: $merge_state)."
            fi
          else
            echo "Nenhum PR encontrado para ${{ github.ref_name }} → main"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
